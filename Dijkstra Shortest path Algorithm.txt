## Dijkstra shortest path Algorithm implementation

import java.util.*; 
import java.lang.*; 
import java.io.*; 

public class DijkstraSPA 
{	  
	static class SPA  { 
	    
	    static final int V = 6; 
	    static int minDistance(int dist[], Boolean shortpath[]) 
	    { 
	        
	        int min = Integer.MAX_VALUE, min_index = -1; 
	  
	        for (int v = 0; v < V; v++) 
	            if (shortpath[v] == false && dist[v] <= min) { 
	                min = dist[v]; 
	                min_index = v; 
	            } 
	  
	        return min_index; 
	    } 
	  
	   static void printSolution(int dist[]) 
	    { 
	        System.out.println("Vertex \t Distance from Source"); 
	        for (int i = 0; i < V; i++) 
	            System.out.println(i + " \t " + dist[i]); 
	    } 
	  
	    static void dijkstra(int graph[][], int src) 
	    { 
	        int distance[] = new int[V];  
	        Boolean shortpath[] = new Boolean[V]; 
	  
	        for (int i = 0; i < V; i++) { 
	        	distance[i] = Integer.MAX_VALUE; 
	            shortpath[i] = false; 
	        } 
	  
	        distance[src] = 0; 
	  
	        for (int i = 0; i < V - 1; i++) { 
	            
	            int u = minDistance(distance, shortpath); 
	  
	            shortpath[u] = true; 
	  
	            for (int v = 0; v < V; v++) 
	  
	                if (!shortpath[v] && graph[u][v] != 0 && distance[u] != Integer.MAX_VALUE && distance[u] + graph[u][v] < distance[v]) 
	                	distance[v] = distance[u] + graph[u][v]; 
	        }  
	        printSolution(distance); 
	    } 
	  
	    public static void main(String[] args) 
	    { 
	        int graph[][] = new int[][] { { 0, 7, 9, 0, 0,14}, 
	                                      { 7, 0, 10,19, 0, 0}, 
	                                      { 9, 10, 0, 11, 0, 2 }, 
	                                      { 0, 19, 11, 0, 6, 0}, 
	                                      { 0, 0, 0, 6, 0, 9}, 
	                                      { 14, 0, 2, 0, 9, 0}};
	                                       
	        SPA  t = new SPA (); 
	        t.dijkstra(graph, 0); 
	    } 
	}
}


