## Breadth First Search Implementation

import java.util.LinkedList;
import java.io.*;
import java.util.*;
public class BreadthFirstSearch 
{
	int node;
	LinkedList<Integer> GraphByList[];
	
	public static void main(String[] args)
	{ 
		int node=7;
		BreadthFirstSearch graph=new BreadthFirstSearch(node);
		graph.addEdge(1, 0);
		graph.addEdge(1, 2);
		graph.addEdge(2, 3);
		graph.addEdge(4, 0);
		graph.addEdge(3, 1);
		graph.addEdge(3, 1);
		graph.addEdge(5, 3);
		graph.addEdge(6, 2);
		graph.printGraph(graph);
		System.out.println("Breadth First search traversal of above graph ");
		graph.BFSearch(1);
	}
	
	BreadthFirstSearch(int node)
	{
		this.node=node;
		GraphByList=new LinkedList[node];
		for(int i=0;i<node;i++)
		{
			GraphByList[i]=new LinkedList();
		}
	}
	
	public void printGraph(BreadthFirstSearch graph) 
	{
		System.out.println("Graph Representation by Adjacency list");
		for(int i=0;i<node;i++) 
		{
			System.out.print("Connected vertex List for vertex "+i+" ->");
			for(Integer v: graph.GraphByList[i])
			{
				System.out.print(" "+v);
			}
			System.out.println();
		}
	}
	
	public void addEdge(int s,int d)
	{
		GraphByList[s].add(d);
		GraphByList[d].add(s);
	}
	
	public void BFSearch(int n)
	{
		boolean visited[] = new boolean[node]; 
        LinkedList<Integer> Q= new LinkedList<Integer>();  
        visited[n]=true; 
        Q.add(n); 
  
        while (Q.size() != 0) 
        { 
            n= Q.poll(); 
            System.out.print(n+" "); 
  
            Iterator<Integer> i = GraphByList[n].listIterator(); 
            while (i.hasNext()) 
            { 
                int value= i.next(); 
                if (!visited[value]) 
                { 
                    visited[value] = true; 
                    Q.add(value); 
                } 
            } 
        }
	}

}








